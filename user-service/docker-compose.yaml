version: '3.8'

services:
  api:
    container_name: user-api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - GO111MODULE=on
      - AIR_WATCH_DELAY=300ms
      - AIR_TMP_DIR=/tmp/air
    depends_on:
      - db
    command: air
    networks:
      - user-network

  db:
    container_name: user-db
    image: postgres:17
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env  
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}

    ports:
      - "5432:5432"
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - user-network
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    
  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"

volumes:
  pgdata:

networks:
  user-network:
    driver: bridge
